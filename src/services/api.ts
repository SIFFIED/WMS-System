import { Shelf, ShelfDetail, WarehouseItem, WarehouseMap } from '../types/warehouse';
import authService from './api/auth'; // 直接导入已实例化的authService



// 库位编号与真实ID的映射关系
const locationIdMapping: Record<string, string> = {
  // A区 (公物仓一)
  'AQ_HJ_001_1_1': '713400511784837121',
  'AQ_HJ_001_1_2': '715287747144982529',
  'AQ_HJ_001_1_3': '715287948408659969',
  'AQ_HJ_001_2_1': '715585114696069127',
  'AQ_HJ_001_2_2': '715585114637348865',
  'AQ_HJ_001_2_3': '715585114670903300',
  'AQ_HJ_001_3_1': '715585114679291909',
  'AQ_HJ_001_3_2': '715585114666708997',
  'AQ_HJ_001_3_3': '715585114712846345',
  'AQ_HJ_001_4_1': '715585114712846347',
  'AQ_HJ_001_4_2': '715585114675097605',
  'AQ_HJ_001_4_3': '715585114641543175',
  'AQ_HJ_002_1_1': '715585114666708993',
  'AQ_HJ_002_1_2': '715585114624765959',
  'AQ_HJ_002_1_3': '715585114645737482',
  'AQ_HJ_002_2_1': '715585114675097607',
  'AQ_HJ_002_2_2': '715585114717040647',
  'AQ_HJ_002_2_3': '715585114637348871',
  'AQ_HJ_002_3_1': '715585114733817861',
  'AQ_HJ_002_3_2': '715585114645737479',
  'AQ_HJ_002_3_3': '715585114649931781',
  'AQ_HJ_002_4_1': '715585114624765953',
  'AQ_HJ_002_4_2': '715585114654126081',
  'AQ_HJ_002_4_3': '715585114654126083',
  'AQ_HJ_003_1_1': '715579299671056389',
  'AQ_HJ_003_1_2': '715579299675250689',
  'AQ_HJ_003_1_3': '715579299692027905',
  'AQ_HJ_003_2_1': '715579299671056401',
  'AQ_HJ_003_2_2': '715579299692027907',
  'AQ_HJ_003_2_3': '715579299675250693',
  'AQ_HJ_003_3_1': '715579299679444993',
  'AQ_HJ_003_3_2': '715579299671056395',
  'AQ_HJ_003_3_3': '715579299679444995',
  'AQ_HJ_003_4_1': '715579299671056403',
  'AQ_HJ_003_4_2': '715579299671056391',
  'AQ_HJ_003_4_3': '715579299671056399',
  'AQ_HJ_004_1_1': '715573431793623043',
  'AQ_HJ_004_1_2': '715573431772651523',
  'AQ_HJ_004_1_3': '715573431768457217',
  'AQ_HJ_004_2_1': '715566717425950721',
  'AQ_HJ_004_2_2': '715566717417562113',
  'AQ_HJ_004_2_3': '715566717417562115',
  'AQ_HJ_004_3_1': '715573431772651521',
  'AQ_HJ_004_3_2': '715573431797817345',
  'AQ_HJ_004_3_3': '715573431772651525',
  'AQ_HJ_004_4_1': '715573431776845827',
  'AQ_HJ_004_4_2': '715573431776845825',
  'AQ_HJ_004_4_3': '715573431793623041',
  'AQ_HJ_005_1_1': '715585114658320385',
  'AQ_HJ_005_1_2': '715585114641543169',
  'AQ_HJ_005_1_3': '715585114717040653',
  'AQ_HJ_005_2_1': '715585114691874817',
  'AQ_HJ_005_2_2': '715585114683486209',
  'AQ_HJ_005_2_3': '715585114683486211',
  'AQ_HJ_005_3_1': '715585114696069131',
  'AQ_HJ_005_3_2': '715585114717040655',
  'AQ_HJ_005_3_3': '715585114725429251',
  'AQ_HJ_005_4_1': '715585114733817871',
  'AQ_HJ_005_4_2': '715585114738012163',
  'AQ_HJ_005_4_3': '715585114658320391',
  'AQ_HJ_006_1_1': '715565037263265793',
  'AQ_HJ_006_1_2': '715565037259071489',
  'AQ_HJ_006_1_3': '715565037254877189',
  'AQ_HJ_006_2_1': '715565037254877191',
  'AQ_HJ_006_2_2': '715565037263265797',
  'AQ_HJ_006_2_3': '715565037263265795',
  'AQ_HJ_006_3_1': '715565037259071491',
  'AQ_HJ_006_3_2': '715565037254877187',
  'AQ_HJ_006_3_3': '715565037254877185',
  'AQ_HJ_006_4_1': '715565443791986689',
  'AQ_HJ_006_4_2': '715566232459550721',
  'AQ_HJ_006_4_3': '715566341553397761',
  'AQ_HJ_007_1_1': '715585114733817857',
  'AQ_HJ_007_1_2': '715585114717040651',
  'AQ_HJ_007_1_3': '715585114645737485',
  'AQ_HJ_007_2_1': '715585114649931779',
  'AQ_HJ_007_2_2': '715585114645737473',
  'AQ_HJ_007_2_3': '715585114628960265',
  'AQ_HJ_007_3_1': '715585114628960267',
  'AQ_HJ_007_3_2': '715585114700263425',
  'AQ_HJ_007_3_3': '715585114670903305',
  'AQ_HJ_007_4_1': '715585114691874819',
  'AQ_HJ_007_4_2': '715585114662514695',
  'AQ_HJ_007_4_3': '715585114670903307',
  'AQ_HJ_008_1_1': '715579299679444997',
  'AQ_HJ_008_1_2': '715579299671056393',
  'AQ_HJ_008_1_3': '715579299675250695',
  'AQ_HJ_008_2_1': '715579299671056387',
  'AQ_HJ_008_2_2': '715579299679444999',
  'AQ_HJ_008_2_3': '715579299683639299',
  'AQ_HJ_008_3_1': '715579299687833601',
  'AQ_HJ_008_3_2': '715579299692027909',
  'AQ_HJ_008_3_3': '715579299671056385',
  'AQ_HJ_008_4_1': '715579299683639297',
  'AQ_HJ_008_4_2': '715579299675250691',
  'AQ_HJ_008_4_3': '715579299671056397',
  'AQ_HJ_009_1_1': '715585114670903311',
  'AQ_HJ_009_1_2': '715585114679291911',
  'AQ_HJ_009_1_3': '715585114687680513',
  'AQ_HJ_009_2_1': '715585114687680519',
  'AQ_HJ_009_2_2': '715585114683486213',
  'AQ_HJ_009_2_3': '715585114687680527',
  'AQ_HJ_009_3_1': '715585114708652033',
  'AQ_HJ_009_3_2': '715585114700263435',
  'AQ_HJ_009_3_3': '715585114717040649',
  'AQ_HJ_009_4_1': '715585114733817859',
  'AQ_HJ_009_4_2': '715585114725429255',
  'AQ_HJ_009_4_3': '715585114725429259',
  'AQ_HJ_010_1_1': '715585114662514691',
  'AQ_HJ_010_1_2': '715585114662514693',
  'AQ_HJ_010_1_3': '715585114645737477',
  'AQ_HJ_010_2_1': '715585114662514697',
  'AQ_HJ_010_2_2': '715585114725429253',
  'AQ_HJ_010_2_3': '715585114645737475',
  'AQ_HJ_010_3_1': '715585114733817865',
  'AQ_HJ_010_3_2': '715585114687680525',
  'AQ_HJ_010_3_3': '715585114704457731',
  'AQ_HJ_010_4_1': '715585114628960259',
  'AQ_HJ_010_4_2': '715585114700263429',
  'AQ_HJ_010_4_3': '715585114717040645',
  'AQ_HJ_011_1_1': '715585114649931783',
  'AQ_HJ_011_1_2': '715585114738012165',
  'AQ_HJ_011_1_3': '715585114624765955',
  'AQ_HJ_011_2_1': '715585114704457739',
  'AQ_HJ_011_2_2': '715585114662514689',
  'AQ_HJ_011_2_3': '715585114704457729',
  'AQ_HJ_011_3_1': '715585114700263437',
  'AQ_HJ_011_3_2': '715585114679291905',
  'AQ_HJ_011_3_3': '715585114637348869',
  'AQ_HJ_011_4_1': '715585114725429265',
  'AQ_HJ_011_4_2': '715585114725429257',
  'AQ_HJ_011_4_3': '715585114683486215',
  'AQ_HJ_012_1_1': '715585114645737483',
  'AQ_HJ_012_1_2': '715585114712846351',
  'AQ_HJ_012_1_3': '715585114658320387',
  'AQ_HJ_012_2_1': '715585114624765957',
  'AQ_HJ_012_2_2': '715585114687680521',
  'AQ_HJ_012_2_3': '715585114700263431',
  'AQ_HJ_012_3_1': '715585114733817869',
  'AQ_HJ_012_3_2': '715585114670903297',
  'AQ_HJ_012_3_3': '715585114628960257',
  'AQ_HJ_012_4_1': '715585114712846343',
  'AQ_HJ_012_4_2': '715585114670903301',
  'AQ_HJ_012_4_3': '715585114704457733',
  'AQ_HJ_013_1_1': '715585114633154561',
  'AQ_HJ_013_1_2': '715585114637348873',
  'AQ_HJ_013_1_3': '715585114641543173',
  'AQ_HJ_013_2_1': '715585114696069129',
  'AQ_HJ_013_2_2': '715585114675097601',
  'AQ_HJ_013_2_3': '715585114649931785',
  'AQ_HJ_013_3_1': '715585114712846341',
  'AQ_HJ_013_3_2': '715585114717040657',
  'AQ_HJ_013_3_3': '715585114628960261',
  'AQ_HJ_013_4_1': '715585114712846339',
  'AQ_HJ_013_4_2': '715585114725429249',
  'AQ_HJ_013_4_3': '715585114729623553',

  // B区 (公物仓一)
  'BQ_HJ_001_1_1': '715601261160062985',
  'BQ_HJ_001_1_2': '715601261172645897',
  'BQ_HJ_001_1_3': '715601261097148419',
  'BQ_HJ_001_2_1': '715601261239754755',
  'BQ_HJ_001_2_2': '715601261260726277',
  'BQ_HJ_001_2_3': '715601261109731329',
  'BQ_HJ_001_3_1': '715601261134897163',
  'BQ_HJ_001_3_2': '715601261139091457',
  'BQ_HJ_001_3_3': '715601261126508547',
  'BQ_HJ_001_4_1': '715601261101342721',
  'BQ_HJ_001_4_2': '715601261231366149',
  'BQ_HJ_001_4_3': '715601261076176899',
  'BQ_HJ_002_1_1': '715601261181034503',
  'BQ_HJ_002_1_2': '715601261181034499',
  'BQ_HJ_002_1_3': '715601261097148417',
  'BQ_HJ_002_2_1': '715601261084565505',
  'BQ_HJ_002_2_2': '715601261109731333',
  'BQ_HJ_002_2_3': '715601261105537027',
  'BQ_HJ_002_3_1': '715601261101342729',
  'BQ_HJ_002_3_2': '715601261243949063',
  'BQ_HJ_002_3_3': '715601261172645895',
  'BQ_HJ_002_4_1': '715601261252337665',
  'BQ_HJ_002_4_2': '715601261071982593',
  'BQ_HJ_002_4_3': '715601261227171841',
  'BQ_HJ_003_1_1': '715601261130702851',
  'BQ_HJ_003_1_2': '715601261134897157',
  'BQ_HJ_003_1_3': '715601261147480071',
  'BQ_HJ_003_2_1': '715601261214588933',
  'BQ_HJ_003_2_2': '715601261092954123',
  'BQ_HJ_003_2_3': '715601261092954119',
  'BQ_HJ_003_3_1': '715601261118119941',
  'BQ_HJ_003_3_2': '715601261109731335',
  'BQ_HJ_003_3_3': '715601261181034505',
  'BQ_HJ_003_4_1': '715601261206200321',
  'BQ_HJ_003_4_2': '715601261218783233',
  'BQ_HJ_003_4_3': '715601261139091459',
  'BQ_HJ_004_1_1': '715601261160062981',
  'BQ_HJ_004_1_2': '715601261202006019',
  'BQ_HJ_004_1_3': '715601261092954113',
  'BQ_HJ_004_2_1': '715601261206200331',
  'BQ_HJ_004_2_2': '715601261264920579',
  'BQ_HJ_004_2_3': '715601261113925635',
  'BQ_HJ_004_3_1': '715601261105537031',
  'BQ_HJ_004_3_2': '715601261243949061',
  'BQ_HJ_004_3_3': '715601261143285767',
  'BQ_HJ_004_4_1': '715601261080371207',
  'BQ_HJ_004_4_2': '715601261189423105',
  'BQ_HJ_004_4_3': '715601261126508551',
  'BQ_HJ_005_1_1': '715601261214588929',
  'BQ_HJ_005_1_2': '715601261097148421',
  'BQ_HJ_005_1_3': '715601261101342731',
  'BQ_HJ_005_2_1': '715601261130702859',
  'BQ_HJ_005_2_2': '715601261185228801',
  'BQ_HJ_005_2_3': '715601261181034507',
  'BQ_HJ_005_3_1': '715601261147480069',
  'BQ_HJ_005_3_2': '715601261172645893',
  'BQ_HJ_005_3_3': '715601261080371201',
  'BQ_HJ_005_4_1': '715601261155868677',
  'BQ_HJ_005_4_2': '715601261176840193',
  'BQ_HJ_005_4_3': '715601261189423107',
  'BQ_HJ_006_1_1': '715601261222977543',
  'BQ_HJ_006_1_2': '715601261218783235',
  'BQ_HJ_006_1_3': '715601261256531969',
  'BQ_HJ_006_2_1': '715601261113925633',
  'BQ_HJ_006_2_2': '715601261071982595',
  'BQ_HJ_006_2_3': '715601261248143361',
  'BQ_HJ_006_3_1': '715601261109731331',
  'BQ_HJ_006_3_2': '715601261092954117',
  'BQ_HJ_006_3_3': '715601261105537025',
  'BQ_HJ_006_4_1': '715601261101342723',
  'BQ_HJ_006_4_2': '715601261088759809',
  'BQ_HJ_006_4_3': '715601261101342727',
  'BQ_HJ_007_1_1': '715601261126508549',
  'BQ_HJ_007_1_2': '715601261168451587',
  'BQ_HJ_007_1_3': '715601261206200327',
  'BQ_HJ_007_2_1': '715601261130702855',
  'BQ_HJ_007_2_2': '715601261122314249',
  'BQ_HJ_007_2_3': '715601261143285765',
  'BQ_HJ_007_3_1': '715601261227171843',
  'BQ_HJ_007_3_2': '715601261206200325',
  'BQ_HJ_007_3_3': '715601261147480067',
  'BQ_HJ_007_4_1': '715601261160062987',
  'BQ_HJ_007_4_2': '715601261181034501',
  'BQ_HJ_007_4_3': '715601261168451591',
  'BQ_HJ_008_1_1': '715601261248143367',
  'BQ_HJ_008_1_2': '715601261193617411',
  'BQ_HJ_008_1_3': '715601261130702849',
  'BQ_HJ_008_2_1': '715601261076176905',
  'BQ_HJ_008_2_2': '715601261231366145',
  'BQ_HJ_008_2_3': '715601261248143369',
  'BQ_HJ_008_3_1': '715601261092954115',
  'BQ_HJ_008_3_2': '715601261243949057',
  'BQ_HJ_008_3_3': '715601261256531971',
  'BQ_HJ_008_4_1': '715601261076176903',
  'BQ_HJ_008_4_2': '715601261076176897',
  'BQ_HJ_008_4_3': '715601261080371205',
  'BQ_HJ_009_1_1': '715601261118119937',
  'BQ_HJ_009_1_2': '715601261101342725',
  'BQ_HJ_009_1_3': '715601261118119939',
  'BQ_HJ_009_2_1': '715601261134897156',
  'BQ_HJ_009_2_2': '715601261126508545',
  'BQ_HJ_009_2_3': '715601261105537029',
  'BQ_HJ_009_3_1': '715601261155868681',
  'BQ_HJ_009_3_2': '715601261239754753',
  'BQ_HJ_009_3_3': '715601261160062989',
  'BQ_HJ_009_4_1': '715601261122314247',
  'BQ_HJ_009_4_2': '715601261151674373',
  'BQ_HJ_009_4_3': '715601261197811715',
  'BQ_HJ_010_1_1': '715601261147480065',
  'BQ_HJ_010_1_2': '715601261134897159',
  'BQ_HJ_010_1_3': '715601261143285763',
  'BQ_HJ_010_2_1': '715601261139091463',
  'BQ_HJ_010_2_2': '715601261168451589',
  'BQ_HJ_010_2_3': '715601261155868679',
  'BQ_HJ_010_3_1': '715601261164257281',
  'BQ_HJ_010_3_2': '715601261168451593',
  'BQ_HJ_010_3_3': '715601261206200329',
  'BQ_HJ_010_4_1': '715601261193617409',
  'BQ_HJ_010_4_2': '715601261248143363',
  'BQ_HJ_010_4_3': '715601261189423109',
  'BQ_HJ_011_1_1': '715601261206200323',
  'BQ_HJ_011_1_2': '715601261222977537',
  'BQ_HJ_011_1_3': '715601261222977539',
  'BQ_HJ_011_2_1': '715601261080371203',
  'BQ_HJ_011_2_2': '715601261231366147',
  'BQ_HJ_011_2_3': '715601261235560449',
  'BQ_HJ_011_3_1': '715601261248143365',
  'BQ_HJ_011_3_2': '715601261260726275',
  'BQ_HJ_011_3_3': '715601261092954121',
  'BQ_HJ_011_4_1': '715601261076176901',
  'BQ_HJ_011_4_2': '715601261088759811',
  'BQ_HJ_011_4_3': '715601261122314241',
  'BQ_HJ_012_1_1': '715601261101342733',
  'BQ_HJ_012_1_2': '715601261134897153',
  'BQ_HJ_012_1_3': '715601261134897161',
  'BQ_HJ_012_2_1': '715601261151674369',
  'BQ_HJ_012_2_2': '715601261155868673',
  'BQ_HJ_012_2_3': '715601261160062983',
  'BQ_HJ_012_3_1': '715601261122314243',
  'BQ_HJ_012_3_2': '715601261189423113',
  'BQ_HJ_012_3_3': '715601261118119943',
  'BQ_HJ_012_4_1': '715601261126508553',
  'BQ_HJ_012_4_2': '715601261172645889',
  'BQ_HJ_012_4_3': '715601261130702857',
  'BQ_HJ_013_1_1': '715601261122314245',
  'BQ_HJ_013_1_2': '715601261130702853',
  'BQ_HJ_013_1_3': '715601261134897165',
  'BQ_HJ_013_2_1': '715601261143285761',
  'BQ_HJ_013_2_2': '715601261139091461',
  'BQ_HJ_013_2_3': '715601261155868675',
  'BQ_HJ_013_3_1': '715601261160062979',
  'BQ_HJ_013_3_2': '715601261151674371',
  'BQ_HJ_013_3_3': '715601261160062977',
  'BQ_HJ_013_4_1': '715601261168451585',
  'BQ_HJ_013_4_2': '715601261172645891',
  'BQ_HJ_013_4_3': '715601261189423111',

  // C区 (公物仓一)
  'CQ_HJ_001_1_1': '715585114779955203',
  'CQ_HJ_001_1_2': '715585114779955219',
  'CQ_HJ_001_1_3': '715585114779955201',
  'CQ_HJ_001_2_1': '715585114784149511',
  'CQ_HJ_001_2_2': '715585114779955211',
  'CQ_HJ_001_2_3': '715585114784149505',
  'CQ_HJ_001_3_1': '715585114784149515',
  'CQ_HJ_001_3_2': '715585114779955207',
  'CQ_HJ_001_3_3': '715585114779955221',
  'CQ_HJ_001_4_1': '715585114779955225',
  'CQ_HJ_001_4_2': '715585114784149509',
  'CQ_HJ_001_4_3': '715585114784149517',
  'CQ_HJ_002_1_1': '715585114784149513',
  'CQ_HJ_002_1_2': '715585114792538117',
  'CQ_HJ_002_1_3': '715585114788343811',
  'CQ_HJ_002_2_1': '715585114792538135',
  'CQ_HJ_002_2_2': '715585114792538125',
  'CQ_HJ_002_2_3': '715585114792538129',
  'CQ_HJ_002_3_1': '715585114792538113',
  'CQ_HJ_002_3_2': '715585114792538119',
  'CQ_HJ_002_3_3': '715585114788343813',
  'CQ_HJ_002_4_1': '715585114792538137',
  'CQ_HJ_002_4_2': '715585114788343809',
  'CQ_HJ_002_4_3': '715585114792538115',
  'CQ_HJ_003_1_1': '715585114628960263',
  'CQ_HJ_003_1_2': '715585114637348867',
  'CQ_HJ_003_1_3': '715585114633154563',
  'CQ_HJ_003_2_1': '715585114641543171',
  'CQ_HJ_003_2_2': '715585114649931777',
  'CQ_HJ_003_2_3': '715585114658320389',
  'CQ_HJ_003_3_1': '715585114670903309',
  'CQ_HJ_003_3_2': '715585114666708995',
  'CQ_HJ_003_3_3': '715585114670903303',
  'CQ_HJ_003_4_1': '715585114662514699',
  'CQ_HJ_003_4_2': '715585114679291907',
  'CQ_HJ_003_4_3': '715585114675097603',
  'CQ_HJ_004_1_1': '715585114754789381',
  'CQ_HJ_004_1_2': '715585114754789379',
  'CQ_HJ_004_1_3': '715585114758983681',
  'CQ_HJ_004_2_1': '715585114763177985',
  'CQ_HJ_004_2_2': '715585114754789387',
  'CQ_HJ_004_2_3': '715585114754789389',
  'CQ_HJ_004_3_1': '715585114758983685',
  'CQ_HJ_004_3_2': '715585114763177993',
  'CQ_HJ_004_3_3': '715585114763177989',
  'CQ_HJ_004_4_1': '715585114763177987',
  'CQ_HJ_004_4_2': '715585114758983684',
  'CQ_HJ_004_4_3': '715585114763177999',
  'CQ_HJ_005_1_1': '715585114775760901',
  'CQ_HJ_005_1_2': '715585114771566615',
  'CQ_HJ_005_1_3': '715585114784149507',
  'CQ_HJ_005_2_1': '715585114771566621',
  'CQ_HJ_005_2_2': '715585114779955205',
  'CQ_HJ_005_2_3': '715585114775760905',
  'CQ_HJ_005_3_1': '715585114779955215',
  'CQ_HJ_005_3_2': '715585114779955214',
  'CQ_HJ_005_3_3': '715585114779955224',
  'CQ_HJ_005_4_1': '715585114779955217',
  'CQ_HJ_005_4_2': '715585114775760903',
  'CQ_HJ_005_4_3': '715585114779955209',
  'CQ_HJ_006_1_1': '715585114704457737',
  'CQ_HJ_006_1_2': '715585114708652037',
  'CQ_HJ_006_1_3': '715585114712846337',
  'CQ_HJ_006_2_1': '715585114708652035',
  'CQ_HJ_006_2_2': '715585114712846350',
  'CQ_HJ_006_2_3': '715585114717040643',
  'CQ_HJ_006_3_1': '715585114729623557',
  'CQ_HJ_006_3_2': '715585114717040641',
  'CQ_HJ_006_3_3': '715585114725429263',
  'CQ_HJ_006_4_1': '715585114733817863',
  'CQ_HJ_006_4_2': '715585114721234945',
  'CQ_HJ_006_4_3': '715585114725429261',
  'CQ_HJ_007_1_1': '715585114742206471',
  'CQ_HJ_007_1_2': '715585114742206475',
  'CQ_HJ_007_1_3': '715585114746400769',
  'CQ_HJ_007_2_1': '715585114746400777',
  'CQ_HJ_007_2_2': '715585114750595073',
  'CQ_HJ_007_2_3': '715585114750595075',
  'CQ_HJ_007_3_1': '715585114750595077',
  'CQ_HJ_007_3_2': '715585114750595079',
  'CQ_HJ_007_3_3': '715585114750595081',
  'CQ_HJ_007_4_1': '715585114754789377',
  'CQ_HJ_007_4_2': '715585114754789383',
  'CQ_HJ_007_4_3': '715585114754789385',
  'CQ_HJ_008_1_1': '715585114767372289',
  'CQ_HJ_008_1_2': '715585114771566605',
  'CQ_HJ_008_1_3': '715585114771566619',
  'CQ_HJ_008_2_1': '715585114771566597',
  'CQ_HJ_008_2_2': '715585114767372295',
  'CQ_HJ_008_2_3': '715585114767372297',
  'CQ_HJ_008_3_1': '715585114771566613',
  'CQ_HJ_008_3_2': '715585114771566611',
  'CQ_HJ_008_3_3': '715585114771566617',
  'CQ_HJ_008_4_1': '715585114771566595',
  'CQ_HJ_008_4_2': '715585114775760897',
  'CQ_HJ_008_4_3': '715585114775760899',
  'CQ_HJ_009_1_1': '715585114725429267',
  'CQ_HJ_009_1_2': '715585114733817867',
  'CQ_HJ_009_1_3': '715585114729623555',
  'CQ_HJ_009_2_1': '715585114738012161',
  'CQ_HJ_009_2_2': '715585114746400773',
  'CQ_HJ_009_2_3': '715585114738012167',
  'CQ_HJ_009_3_1': '715585114742206465',
  'CQ_HJ_009_3_2': '715585114742206473',
  'CQ_HJ_009_3_3': '715585114742206467',
  'CQ_HJ_009_4_1': '715585114746400775',
  'CQ_HJ_009_4_2': '715585114742206469',
  'CQ_HJ_009_4_3': '715585114746400771',
  'CQ_HJ_010_1_1': '715585114763177995',
  'CQ_HJ_010_1_2': '715585114763177997',
  'CQ_HJ_010_1_3': '715585114771566609',
  'CQ_HJ_010_2_1': '715585114763177991',
  'CQ_HJ_010_2_2': '715585114771566593',
  'CQ_HJ_010_2_3': '715585114767372293',
  'CQ_HJ_010_3_1': '715585114767372291',
  'CQ_HJ_010_3_2': '715585114767372299',
  'CQ_HJ_010_3_3': '715585114771566599',
  'CQ_HJ_010_4_1': '715585114771566601',
  'CQ_HJ_010_4_2': '715585114771566607',
  'CQ_HJ_010_4_3': '715585114771566603',
  'CQ_HJ_011_1_1': '715585114800926727',
  'CQ_HJ_011_1_2': '715585114800926721',
  'CQ_HJ_011_1_3': '715585114796732423',
  'CQ_HJ_011_2_1': '715585114800926729',
  'CQ_HJ_011_2_2': '715585114800926733',
  'CQ_HJ_011_2_3': '715585114800926725',
  'CQ_HJ_011_3_1': '715585114800926735',
  'CQ_HJ_011_3_2': '715585114800926731',
  'CQ_HJ_011_3_3': '715585114800926723',
  'CQ_HJ_011_4_1': '715585114800926737',
  'CQ_HJ_011_4_2': '715585114800926739',
  'CQ_HJ_011_4_3': '715585114800926741',
  'CQ_HJ_012_1_1': '715585114792538145',
  'CQ_HJ_012_1_2': '715585114792538139',
  'CQ_HJ_012_1_3': '715585114792538121',
  'CQ_HJ_012_2_1': '715585114792538127',
  'CQ_HJ_012_2_2': '715585114792538143',
  'CQ_HJ_012_2_3': '715585114792538123',
  'CQ_HJ_012_3_1': '715585114792538141',
  'CQ_HJ_012_3_2': '715585114792538133',
  'CQ_HJ_012_3_3': '715585114792538131',
  'CQ_HJ_012_4_1': '715585114796732419',
  'CQ_HJ_012_4_2': '715585114796732421',
  'CQ_HJ_012_4_3': '715585114796732417',
  'CQ_HJ_013_1_1': '715585114683486217',
  'CQ_HJ_013_1_2': '715585114687680523',
  'CQ_HJ_013_1_3': '715585114687680517',
  'CQ_HJ_013_2_1': '715585114687680515',
  'CQ_HJ_013_2_2': '715585114696069125',
  'CQ_HJ_013_2_3': '715585114696069123',
  'CQ_HJ_013_3_1': '715585114691874821',
  'CQ_HJ_013_3_2': '715585114700263427',
  'CQ_HJ_013_3_3': '715585114696069121',
  'CQ_HJ_013_4_1': '715585114700263433',
  'CQ_HJ_013_4_2': '715585114708652039',
  'CQ_HJ_013_4_3': '715585114704457735',

  // D区 (公物仓一)
  'DQ_HJ_001_1_1': '715601261181034497',
  'DQ_HJ_001_1_2': '715601261197811717',
  'DQ_HJ_001_1_3': '715601261243949059',
  'DQ_HJ_001_2_1': '715601261197811719',
  'DQ_HJ_001_2_2': '715601261197811713',
  'DQ_HJ_001_2_3': '715601261210394625',
  'DQ_HJ_001_3_1': '715601261202006017',
  'DQ_HJ_001_3_2': '715601261214588931',
  'DQ_HJ_001_3_3': '715601261214588935',
  'DQ_HJ_001_4_1': '715601261222977541',
  'DQ_HJ_001_4_2': '715601261231366151',
  'DQ_HJ_001_4_3': '715601261243949065',
  'DQ_HJ_002_1_1': '715601261260726273',
  'DQ_HJ_002_1_2': '715601261269114883',
  'DQ_HJ_002_1_3': '715601261273309185',
  'DQ_HJ_002_2_1': '715601261269114881',
  'DQ_HJ_002_2_2': '715601261264920577',
  'DQ_HJ_002_2_3': '715601261269114885',
  'DQ_HJ_002_3_1': '715601261281697793',
  'DQ_HJ_002_3_2': '715601261277503489',
  'DQ_HJ_002_3_3': '715601261285892097',
  'DQ_HJ_002_4_1': '715601261306863619',
  'DQ_HJ_002_4_2': '715601261323640833',
  'DQ_HJ_002_4_3': '715601261285892099',
  'DQ_HJ_003_1_1': '715601261323640837',
  'DQ_HJ_003_1_2': '715601261319446531',
  'DQ_HJ_003_1_3': '715601261306863623',
  'DQ_HJ_003_2_1': '715601261327835137',
  'DQ_HJ_003_2_2': '715601261340418049',
  'DQ_HJ_003_2_3': '715601261285892101',
  'DQ_HJ_003_3_1': '715601261361389571',
  'DQ_HJ_003_3_2': '715601261332029445',
  'DQ_HJ_003_3_3': '715601261344612353',
  'DQ_HJ_003_4_1': '715601261290086401',
  'DQ_HJ_003_4_2': '715601261306863621',
  'DQ_HJ_003_4_3': '715601261298475011',
  'DQ_HJ_004_1_1': '715601261332029441',
  'DQ_HJ_004_1_2': '715601261298475009',
  'DQ_HJ_004_1_3': '715601261298475013',
  'DQ_HJ_004_2_1': '715601261298475015',
  'DQ_HJ_004_2_2': '715601261306863617',
  'DQ_HJ_004_2_3': '715601261315252225',
  'DQ_HJ_004_3_1': '715601261319446529',
  'DQ_HJ_004_3_2': '715601261311057921',
  'DQ_HJ_004_3_3': '715601261315252227',
  'DQ_HJ_004_4_1': '715601261323640835',
  'DQ_HJ_004_4_2': '715601261327835139',
  'DQ_HJ_004_4_3': '715601261327835141',
  'DQ_HJ_005_1_1': '715601261327835143',
  'DQ_HJ_005_1_2': '715601261378166785',
  'DQ_HJ_005_1_3': '715601261332029443',
  'DQ_HJ_005_2_1': '715601261361389573',
  'DQ_HJ_005_2_2': '715601261332029447',
  'DQ_HJ_005_2_3': '715601261344612355',
  'DQ_HJ_005_3_1': '715601261361389569',
  'DQ_HJ_005_3_2': '715601261340418051',
  'DQ_HJ_005_3_3': '715601261365583873',
  'DQ_HJ_005_4_1': '715601261373972483',
  'DQ_HJ_005_4_2': '715601261373972481',
  'DQ_HJ_005_4_3': '715601261369778177',
  'DQ_HJ_006_1_1': '715601261378166789',
  'DQ_HJ_006_1_2': '715601261382361089',
  'DQ_HJ_006_1_3': '715601261390749701',
  'DQ_HJ_006_2_1': '715601261378166787',
  'DQ_HJ_006_2_2': '715601261386555393',
  'DQ_HJ_006_2_3': '715601261399138305',
  'DQ_HJ_006_3_1': '715601261382361091',
  'DQ_HJ_006_3_2': '715601261432692739',
  'DQ_HJ_006_3_3': '715601261390749697',
  'DQ_HJ_006_4_1': '715601261394944001',
  'DQ_HJ_006_4_2': '715601261394944003',
  'DQ_HJ_006_4_3': '715601261399138307',
  'DQ_HJ_007_1_1': '715601261407526917',
  'DQ_HJ_007_1_2': '715601261390749700',
  'DQ_HJ_007_1_3': '715601261407526915',
  'DQ_HJ_007_2_1': '715601261407526913',
  'DQ_HJ_007_2_2': '715601261411721217',
  'DQ_HJ_007_2_3': '715601261415915523',
  'DQ_HJ_007_3_1': '715601261415915521',
  'DQ_HJ_007_3_2': '715601261415915525',
  'DQ_HJ_007_3_3': '715601261415915527',
  'DQ_HJ_007_4_1': '715601261428498433',
  'DQ_HJ_007_4_2': '715601261424304129',
  'DQ_HJ_007_4_3': '715601261499801601',
  'DQ_HJ_008_1_1': '715601261432692741',
  'DQ_HJ_008_1_2': '715601261483024385',
  'DQ_HJ_008_1_3': '715601261432692737',
  'DQ_HJ_008_2_1': '715601261428498435',
  'DQ_HJ_008_2_2': '715601261495607297',
  'DQ_HJ_008_2_3': '715601261503995907',
  'DQ_HJ_008_3_1': '715601261487218689',
  'DQ_HJ_008_3_2': '715601261474635777',
  'DQ_HJ_008_3_3': '715601261478830081',
  'DQ_HJ_008_4_1': '715601261495607299',
  'DQ_HJ_008_4_2': '715601261478830085',
  'DQ_HJ_008_4_3': '715601261478830083',
  'DQ_HJ_009_1_1': '715601261483024387',
  'DQ_HJ_009_1_2': '715601261503995905',
  'DQ_HJ_009_1_3': '715601261520773123',
  'DQ_HJ_009_2_1': '715601261478830087',
  'DQ_HJ_009_2_2': '715601261516578821',
  'DQ_HJ_009_2_3': '715601261495607301',
  'DQ_HJ_009_3_1': '715601261516578817',
  'DQ_HJ_009_3_2': '715601261516578819',
  'DQ_HJ_009_3_3': '715601261512384513',
  'DQ_HJ_009_4_1': '715601261520773121',
  'DQ_HJ_009_4_2': '715601261545938945',
  'DQ_HJ_009_4_3': '715601261537550339',
  'DQ_HJ_010_1_1': '715601261537550337',
  'DQ_HJ_010_1_2': '715601261541744641',
  'DQ_HJ_010_1_3': '715601261592076289',
  'DQ_HJ_010_2_1': '715601261587881985',
  'DQ_HJ_010_2_2': '715601261575299073',
  'DQ_HJ_010_2_3': '715601261596270593',
  'DQ_HJ_010_3_1': '715601261596270595',
  'DQ_HJ_010_3_2': '715601261596270597',
  'DQ_HJ_010_3_3': '715601261604659201',
  'DQ_HJ_010_4_1': '715601261608853505',
  'DQ_HJ_010_4_2': '715601261613047809',
  'DQ_HJ_010_4_3': '715601261617242113',
  'DQ_HJ_011_1_1': '715601261629825025',
  'DQ_HJ_011_1_2': '715601261625630721',
  'DQ_HJ_011_1_3': '715601261634019331',
  'DQ_HJ_011_2_1': '715601261638213633',
  'DQ_HJ_011_2_2': '715601261634019329',
  'DQ_HJ_011_2_3': '715601261634019333',
  'DQ_HJ_011_3_1': '715601261638213635',
  'DQ_HJ_011_3_2': '715601261642407937',
  'DQ_HJ_011_3_3': '715601261667573761',
  'DQ_HJ_011_4_1': '715601261675962374',
  'DQ_HJ_011_4_2': '715601261675962369',
  'DQ_HJ_011_4_3': '715601261650796545',

  // E区 (公物仓二)

  // F区 (公物仓二)
  'FQ_HJ_001_1_1': '715601261894066177',
  'FQ_HJ_001_1_2': '715601261894066203',
  'FQ_HJ_001_1_3': '715601261894066183',
  'FQ_HJ_001_2_1': '715601261894066195',
  'FQ_HJ_001_2_2': '715601261894066179',
  'FQ_HJ_001_2_3': '715601261894066181',
  'FQ_HJ_001_3_1': '715601261894066191',
  'FQ_HJ_001_3_2': '715601261898260483',
  'FQ_HJ_001_3_3': '715601261898260481',
  'FQ_HJ_001_4_1': '715601261894066207',
  'FQ_HJ_001_4_2': '715601261898260485',
  'FQ_HJ_001_4_3': '715601261894066197',
  'FQ_HJ_002_1_1': '715601261894066199',
  'FQ_HJ_002_1_2': '715601261902454801',
  'FQ_HJ_002_1_3': '715601261898260489',
  'FQ_HJ_002_2_1': '715601261902454795',
  'FQ_HJ_002_2_2': '715601261902454797',
  'FQ_HJ_002_2_3': '715601261906649097',
  'FQ_HJ_002_3_1': '715601261915037707',
  'FQ_HJ_002_3_2': '715601261919232011',
  'FQ_HJ_002_3_3': '715601261906649089',
  'FQ_HJ_002_4_1': '715601261915037697',
  'FQ_HJ_002_4_2': '715601261902454805',
  'FQ_HJ_002_4_3': '715601261923426307',
  'FQ_HJ_003_1_1': '715601261915037701',
  'FQ_HJ_003_1_2': '715601261915037711',
  'FQ_HJ_003_1_3': '715601261902454793',
  'FQ_HJ_003_2_1': '715601261902454789',
  'FQ_HJ_003_2_2': '715601261902454799',
  'FQ_HJ_003_2_3': '715601261898260491',
  'FQ_HJ_003_3_1': '715601261902454787',
  'FQ_HJ_003_3_2': '715601261898260495',
  'FQ_HJ_003_3_3': '715601261894066205',
  'FQ_HJ_003_4_1': '715601261898260487',
  'FQ_HJ_003_4_2': '715601261902454785',
  'FQ_HJ_003_4_3': '715601261902454791',
  'FQ_HJ_004_1_1': '715601261898260493',
  'FQ_HJ_004_1_2': '715601261906649093',
  'FQ_HJ_004_1_3': '715601261910843399',
  'FQ_HJ_004_2_1': '715601261906649091',
  'FQ_HJ_004_2_2': '715601261906649099',
  'FQ_HJ_004_2_3': '715601261898260497',
  'FQ_HJ_004_3_1': '715601261910843395',
  'FQ_HJ_004_3_2': '715601261902454803',
  'FQ_HJ_004_3_3': '715601261915037699',
  'FQ_HJ_004_4_1': '715601261910843393',
  'FQ_HJ_004_4_2': '715601261906649095',
  'FQ_HJ_004_4_3': '715601261910843397',
  'FQ_HJ_005_1_1': '715601261915037705',
  'FQ_HJ_005_1_2': '715601261910843403',
  'FQ_HJ_005_1_3': '715601261910843407',
  'FQ_HJ_005_2_1': '715601261910843409',
  'FQ_HJ_005_2_2': '715601261915037709',
  'FQ_HJ_005_2_3': '715601261910843405',
  'FQ_HJ_005_3_1': '715601261910843401',
  'FQ_HJ_005_3_2': '715601261919232021',
  'FQ_HJ_005_3_3': '715601261919232009',
  'FQ_HJ_005_4_1': '715601261915037703',
  'FQ_HJ_005_4_2': '715601261919232015',
  'FQ_HJ_005_4_3': '715601261919232003',
  'FQ_HJ_006_1_1': '715601261919232019',
  'FQ_HJ_006_1_2': '715601261919232017',
  'FQ_HJ_006_1_3': '715601261919232029',
  'FQ_HJ_006_2_1': '715601261919232007',
  'FQ_HJ_006_2_2': '715601261919232024',
  'FQ_HJ_006_2_3': '715601261919232006',
  'FQ_HJ_006_3_1': '715601261919232027',
  'FQ_HJ_006_3_2': '715601261923426313',
  'FQ_HJ_006_3_3': '715601261923426305',
  'FQ_HJ_006_4_1': '715601261919232013',
  'FQ_HJ_006_4_2': '715601261927620621',
  'FQ_HJ_006_4_3': '715601261927620613',
  'FQ_HJ_007_1_1': '715601261919232025',
  'FQ_HJ_007_1_2': '715601261927620611',
  'FQ_HJ_007_1_3': '715601261919232001',
  'FQ_HJ_007_2_1': '715601261927620609',
  'FQ_HJ_007_2_2': '715601261923426309',
  'FQ_HJ_007_2_3': '715601261931814915',
  'FQ_HJ_007_3_1': '715601261927620616',
  'FQ_HJ_007_3_2': '715601261931814917',
  'FQ_HJ_007_3_3': '715601261923426311',
  'FQ_HJ_007_4_1': '715601261927620631',
  'FQ_HJ_007_4_2': '715601261936009217',
  'FQ_HJ_007_4_3': '715601261931814913',
  'FQ_HJ_008_1_1': '715601261927620617',
  'FQ_HJ_008_1_2': '715601261927620623',
  'FQ_HJ_008_1_3': '715601261927620625',
  'FQ_HJ_008_2_1': '715601261927620627',
  'FQ_HJ_008_2_2': '715601261927620633',
  'FQ_HJ_008_2_3': '715601261927620619',
  'FQ_HJ_008_3_1': '715601261927620629',
  'FQ_HJ_008_3_2': '715601261940203541',
  'FQ_HJ_008_3_3': '715601261931814921',
  'FQ_HJ_008_4_1': '715601261936009227',
  'FQ_HJ_008_4_2': '715601261936009229',
  'FQ_HJ_008_4_3': '715601261940203529',
};

// 反向映射：从真实ID到库位编号
const idToLocationMapping: Record<string, string> = {};

// 初始化反向映射
Object.entries(locationIdMapping).forEach(([locationCode, id]) => {
  idToLocationMapping[id] = locationCode;
});

// 辅助函数：将库位编号转换为货架ID、层ID和位置ID
const parseLocationCode = (locationCode: string): { warehouseId: string, shelfId: string, layerId: string, positionId: string } | null => {
  if (!locationCode) return null;

  const parts = locationCode.split('_');
  if (parts.length < 5) return null;

  const areaCode = parts[0]; // 如 "AQ"
  const shelfType = parts[1]; // 如 "HJ"
  const shelfNum = parts[2]; // 如 "001"
  const layer = parts[3]; // 如 "1"
  const position = parts[4]; // 如 "1"

  // 确定仓库ID
  const warehouseId = ['AQ', 'BQ', 'CQ', 'DQ'].includes(areaCode) ? 'warehouse1' : 'warehouse2';

  // 构建货架ID (如 "A1")
  const area = areaCode.charAt(0);
  const shelfId = `${area}${parseInt(shelfNum, 10)}`;

  // 构建层ID和位置ID
  const layerId = `${shelfId}-L${layer}`;
  const positionId = `${layerId}-P${position}`;

  return { warehouseId, shelfId, layerId, positionId };
};

// 辅助函数：将货架ID、层ID和位置ID转换为库位编号
const buildLocationCode = (shelfId: string, layerId: string, positionId: string): string | null => {
  if (!shelfId || !layerId || !positionId) return null;

  // 从货架ID提取区域代码 (如 "A" -> "AQ")
  const area = shelfId.charAt(0);
  const areaCode = `${area}Q`;

  // 从货架ID提取货架编号 (如 "A1" -> "001")
  const shelfNum = shelfId.substring(1);
  const paddedShelfNum = shelfNum.padStart(3, '0');

  // 从层ID和位置ID提取层号和位置号
  const layerMatch = layerId.match(/L(\d+)$/);
  const positionMatch = positionId.match(/P(\d+)$/);

  if (!layerMatch || !positionMatch) return null;

  const layer = layerMatch[1];
  const position = positionMatch[1];

  // 构建库位编号 (如 "AQ_HJ_001_1_1")
  return `${areaCode}_HJ_${paddedShelfNum}_${layer}_${position}`;
};

// 模拟API响应数据 - 公物仓一
const mockWarehouseData1: WarehouseMap = {
  id: 'warehouse1',
  name: '公物仓（一）',
  width: 800,
  height: 600,
  shelves: {
    a: [
      { id: 'A13', name: 'A13', itemCount: 2, status: 'empty' },
      { id: 'A12', name: 'A12', itemCount: 9, status: 'empty' },
      { id: 'A11', name: 'A11', itemCount: 8, status: 'empty' },
      { id: 'A10', name: 'A10', itemCount: 4, status: 'empty' },
      { id: 'A9', name: 'A9', itemCount: 11, status: 'empty' },
      { id: 'A8', name: 'A8', itemCount: 6, status: 'empty' },
      { id: 'A7', name: 'A7', itemCount: 9, status: 'empty' },
      { id: 'A6', name: 'A6', itemCount: 7, status: 'empty' },
      { id: 'A5', name: 'A5', itemCount: 3, status: 'empty' },
      { id: 'A4', name: 'A4', itemCount: 10, status: 'empty' },
      { id: 'A3', name: 'A3', itemCount: 5, status: 'empty' },
      { id: 'A2', name: 'A2', itemCount: 12, status: 'empty' },
      { id: 'A1', name: 'A1', itemCount: 8, status: 'empty' },
    ],
    b: [
      { id: 'B13', name: 'B13', itemCount: 5, status: 'empty' },
      { id: 'B12', name: 'B12', itemCount: 8, status: 'empty' },
      { id: 'B11', name: 'B11', itemCount: 7, status: 'empty' },
      { id: 'B10', name: 'B10', itemCount: 3, status: 'empty' },
      { id: 'B9', name: 'B9', itemCount: 11, status: 'empty' },
      { id: 'B8', name: 'B8', itemCount: 6, status: 'empty' },
      { id: 'B7', name: 'B7', itemCount: 9, status: 'empty' },
      { id: 'B6', name: 'B6', itemCount: 12, status: 'empty' },
      { id: 'B5', name: 'B5', itemCount: 4, status: 'empty' },
      { id: 'B4', name: 'B4', itemCount: 8, status: 'empty' },
      { id: 'B3', name: 'B3', itemCount: 10, status: 'empty' },
      { id: 'B2', name: 'B2', itemCount: 5, status: 'empty' },
      { id: 'B1', name: 'B1', itemCount: 7, status: 'empty' },
    ],
    c: [
      { id: 'C13', name: 'C13', itemCount: 7, status: 'empty' },
      { id: 'C12', name: 'C12', itemCount: 4, status: 'empty' },
      { id: 'C11', name: 'C11', itemCount: 9, status: 'empty' },
      { id: 'C10', name: 'C10', itemCount: 6, status: 'empty' },
      { id: 'C9', name: 'C9', itemCount: 12, status: 'empty' },
      { id: 'C8', name: 'C8', itemCount: 5, status: 'empty' },
      { id: 'C7', name: 'C7', itemCount: 8, status: 'empty' },
      { id: 'C6', name: 'C6', itemCount: 10, status: 'empty' },
      { id: 'C5', name: 'C5', itemCount: 3, status: 'empty' },
      { id: 'C4', name: 'C4', itemCount: 7, status: 'empty' },
      { id: 'C3', name: 'C3', itemCount: 11, status: 'empty' },
      { id: 'C2', name: 'C2', itemCount: 4, status: 'empty' },
      { id: 'C1', name: 'C1', itemCount: 9, status: 'empty' },
    ],
    d: [
      { id: 'D11', name: 'D11', itemCount: 9, status: 'empty' },
      { id: 'D10', name: 'D10', itemCount: 5, status: 'empty' },
      { id: 'D9', name: 'D9', itemCount: 8, status: 'empty' },
      { id: 'D8', name: 'D8', itemCount: 11, status: 'empty' },
      { id: 'D7', name: 'D7', itemCount: 4, status: 'empty' },
      { id: 'D6', name: 'D6', itemCount: 7, status: 'empty' },
      { id: 'D5', name: 'D5', itemCount: 10, status: 'empty' },
      { id: 'D4', name: 'D4', itemCount: 5, status: 'empty' },
      { id: 'D3', name: 'D3', itemCount: 9, status: 'empty' },
      { id: 'D2', name: 'D2', itemCount: 3, status: 'empty' },
      { id: 'D1', name: 'D1', itemCount: 6, status: 'empty' },
    ]
  }
};

// 模拟API响应数据 - 公物仓二
const mockWarehouseData2: WarehouseMap = {
  id: 'warehouse2',
  name: '公物仓（二）',
  width: 800,
  height: 600,
  shelves: {
    // 必需的字段，但为空数组
    a: [],
    b: [],
    c: [],
    d: [],
    // 顶部横向排列的E区货架 - 已全部移除
    e: [],
    // 右侧F区货架 - 从上到下F5、F6、F7、F8
    f: [
      { id: 'F5', name: 'F5', itemCount: 8, status: 'empty' },
      { id: 'F6', name: 'F6', itemCount: 8, status: 'empty' },
      { id: 'F7', name: 'F7', itemCount: 8, status: 'empty' },
      { id: 'F8', name: 'F8', itemCount: 8, status: 'empty' },
    ],
    // 左侧货架 - 从上到下F1、F2、F3、F4
    r: [
      { id: 'F1', name: 'F1', itemCount: 5, status: 'empty' },
      { id: 'F2', name: 'F2', itemCount: 5, status: 'empty' },
      { id: 'F3', name: 'F3', itemCount: 7, status: 'empty' },
      { id: 'F4', name: 'F4', itemCount: 10, status: 'empty' },
    ],
  }
};

// 所有仓库的集合
const allWarehouses: Record<string, WarehouseMap> = {
  warehouse1: mockWarehouseData1,
  warehouse2: mockWarehouseData2
};

// 为各仓库生成物品数据
const allWarehouseItemsData: Record<string, Record<string, Record<string, Record<string, WarehouseItem[]>>>> = {
  warehouse1: {},
  warehouse2: {}
};

// 模拟货架详情数据
const generateShelfDetail = (warehouseId: string, shelfId: string): ShelfDetail => {
  const shelfItemsData = allWarehouseItemsData[warehouseId]?.[shelfId] || {};

  const layers = [1, 2, 3, 4].map(layerNum => {
    const layerId = `${shelfId}-L${layerNum}`;

    return {
      id: layerId,
      positions: [1, 2, 3].map(posNum => {
        const positionId = `${shelfId}-L${layerNum}-P${posNum}`;
        const hasItems = shelfItemsData[layerId] &&
          shelfItemsData[layerId][positionId] &&
          shelfItemsData[layerId][positionId].length > 0;

        return {
          id: positionId,
          name: `${posNum}`,
          hasItems
        };
      })
    };
  });

  return {
    id: shelfId,
    name: shelfId,
    layers
  };
};

// 生成固定的物品数据（不再随机）
const generateItemsForShelf = (warehouseId: string, shelfId: string): Record<string, Record<string, WarehouseItem[]>> => {
  const result: Record<string, Record<string, WarehouseItem[]>> = {};

  // 默认所有层和库位都无物品
  for (let layerNum = 1; layerNum <= 4; layerNum++) {
    const layerId = `${shelfId}-L${layerNum}`;
    result[layerId] = {};

    for (let posNum = 1; posNum <= 3; posNum++) {
      const positionId = `${shelfId}-L${layerNum}-P${posNum}`;
      result[layerId][positionId] = [];
    }
  }

  // 不再添加任何物品，所有货架都为空
  return result;
};

// 辅助函数：向指定层的指定库位添加物品
const addItemsToLayer = (
  result: Record<string, Record<string, WarehouseItem[]>>,
  shelfId: string,
  layerNum: number,
  itemCount: number
) => {
  const layerId = `${shelfId}-L${layerNum}`;
  const firstChar = shelfId.charAt(0);

  // 根据不同区域设置不同的物品类别
  let category = '电子';
  if (['A', 'E'].includes(firstChar)) category = '电子';
  else if (['B', 'F'].includes(firstChar)) category = '办公';
  else if (['C', 'R'].includes(firstChar)) category = '工具';
  else if (firstChar === 'D') category = '包装';

  // 由于我们不再添加物品，此函数实际上不会被调用
  // 但为了代码完整性，仍然保留此函数
  for (let posNum = 1; posNum <= 3; posNum++) {
    const positionId = `${shelfId}-L${layerNum}-P${posNum}`;
    result[layerId][positionId] = []; // 确保库位为空
  }
};

// 为A、B、C、D区所有货架生成物品 (公物仓一)
Object.entries(mockWarehouseData1.shelves).forEach(([area, shelves]) => {
  allWarehouseItemsData.warehouse1[area] = {};
  shelves.forEach(shelf => {
    allWarehouseItemsData.warehouse1[shelf.id] = generateItemsForShelf('warehouse1', shelf.id);
  });
});

// 为E、F、R区所有货架生成物品 (公物仓二)
Object.entries(mockWarehouseData2.shelves).forEach(([area, shelves]) => {
  allWarehouseItemsData.warehouse2[area] = {};
  shelves.forEach(shelf => {
    allWarehouseItemsData.warehouse2[shelf.id] = generateItemsForShelf('warehouse2', shelf.id);
  });
});

// 更新货架状态，根据有物品的层数 - 由于已经没有物品，这个函数会将所有货架设为empty
const updateShelfStatuses = (warehouseId: string) => {
  const warehouseData = allWarehouses[warehouseId];
  if (!warehouseData) return;

  Object.entries(warehouseData.shelves).forEach(([area, shelves]) => {
    shelves.forEach((shelf: Shelf) => {
      // 直接设置所有货架状态为empty
      shelf.status = 'empty'; // 没有层有物品 - 灰色
    });
  });
};

// 调用更新函数，更新两个仓库的状态
updateShelfStatuses('warehouse1');
updateShelfStatuses('warehouse2');

// 获取所有仓库列表
export const fetchWarehouseList = (): Promise<{ id: string; name: string }[]> => {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve(Object.values(allWarehouses).map(warehouse => ({
        id: warehouse.id,
        name: warehouse.name
      })));
    }, 300);
  });
};

// 获取仓库地图数据
export const fetchWarehouseMap = (warehouseId: string = 'warehouse1'): Promise<WarehouseMap> => {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve(allWarehouses[warehouseId] || mockWarehouseData1);
    }, 500);
  });
};

// 获取货架详细信息
export const fetchShelfDetail = (warehouseId: string = 'warehouse1', shelfId: string): Promise<ShelfDetail> => {
  return new Promise((resolve) => {
    setTimeout(() => {
      try {
        const shelfDetail = generateShelfDetail(warehouseId, shelfId);

        // 为每个库位添加真实ID
        shelfDetail.layers.forEach(layer => {
          layer.positions.forEach(position => {
            try {
              // 构建库位编号
              const locationCode = buildLocationCode(shelfId, layer.id, position.id);
              if (locationCode && locationIdMapping[locationCode]) {
                // 添加真实ID到库位信息中
                position.realId = locationIdMapping[locationCode];
              }
            } catch (posError) {
              console.error(`处理库位 ${position.id} 时出错:`, posError);
              // 确保position.hasItems有一个默认值
              position.hasItems = false;
            }
          });
        });

        resolve(shelfDetail);
      } catch (error) {
        console.error(`获取货架 ${shelfId} 详情时出错:`, error);
        // 返回一个空的货架详情，避免UI崩溃
        const emptyShelfDetail: ShelfDetail = {
          id: shelfId,
          name: shelfId,
          layers: [1, 2, 3, 4].map(layerNum => ({
            id: `${shelfId}-L${layerNum}`,
            positions: [1, 2, 3].map(posNum => ({
              id: `${shelfId}-L${layerNum}-P${posNum}`,
              name: `${posNum}`,
              hasItems: false
            }))
          }))
        };
        resolve(emptyShelfDetail);
      }
    }, 300);
  });
};

// 获取货架层中特定位置的物品
export const fetchPositionItems = (
  warehouseId: string = 'warehouse1',
  shelfId: string,
  layerId: string,
  positionId: string
): Promise<WarehouseItem[]> => {
  return new Promise((resolve) => {
    setTimeout(() => {
      try {
        let items: WarehouseItem[] = [];

        if (
          allWarehouseItemsData[warehouseId] &&
          allWarehouseItemsData[warehouseId][shelfId] &&
          allWarehouseItemsData[warehouseId][shelfId][layerId] &&
          allWarehouseItemsData[warehouseId][shelfId][layerId][positionId]
        ) {
          items = allWarehouseItemsData[warehouseId][shelfId][layerId][positionId];

          // 为每个物品添加真实库位ID
          const locationCode = buildLocationCode(shelfId, layerId, positionId);
          if (locationCode && locationIdMapping[locationCode]) {
            const realId = locationIdMapping[locationCode];
            items = items.map(item => ({
              ...item,
              realLocationId: realId,
              locationCode: locationCode
            }));
          }

          // 验证每个物品的必要属性
          items = items.filter(isValidWarehouseItem);
        }

        resolve(items);
      } catch (error) {
        console.error(`获取位置 ${positionId} 的物品时出错:`, error);
        // 返回空数组，避免UI崩溃
        resolve([]);
      }
    }, 300);
  });
};

// 根据真实ID查找库位信息
export const findLocationByRealId = (realId: string): Promise<{
  found: boolean;
  warehouseId?: string;
  shelfId?: string;
  layerId?: string;
  positionId?: string;
  locationCode?: string;
}> => {
  return new Promise((resolve) => {
    setTimeout(() => {
      const locationCode = idToLocationMapping[realId];

      if (locationCode) {
        const locationInfo = parseLocationCode(locationCode);

        if (locationInfo) {
          resolve({
            found: true,
            warehouseId: locationInfo.warehouseId,
            shelfId: locationInfo.shelfId,
            layerId: locationInfo.layerId,
            positionId: locationInfo.positionId,
            locationCode
          });
          return;
        }
      }

      resolve({ found: false });
    }, 300);
  });
};

// 添加处理物品数据的方法
// 解析物品数据中的库位ID信息
const parseLocationId = (item: Record<string, any>): string | null => {
  try {
    // 直接查找属性 "T710063228176306177"
    if (item && item.T710063228176306177 && typeof item.T710063228176306177 === 'string') {
      // 如果数据以S开头，则移除S并返回剩余部分
      if (item.T710063228176306177.startsWith('S')) {
        return item.T710063228176306177.substring(1);
      }
      return item.T710063228176306177;
    }

    // 尝试检查是否有data属性
    if (item && item.data) {
      if (typeof item.data === 'object' && item.data !== null) {
        if (item.data.T710063228176306177 && typeof item.data.T710063228176306177 === 'string') {
          if (item.data.T710063228176306177.startsWith('S')) {
            return item.data.T710063228176306177.substring(1);
          }
          return item.data.T710063228176306177;
        }
      } else if (typeof item.data === 'string') {
        // 尝试解析JSON字符串
        try {
          const parsedData = JSON.parse(item.data);
          if (parsedData && typeof parsedData === 'object') {
            if (parsedData.T710063228176306177 && typeof parsedData.T710063228176306177 === 'string') {
              if (parsedData.T710063228176306177.startsWith('S')) {
                return parsedData.T710063228176306177.substring(1);
              }
              return parsedData.T710063228176306177;
            }
          }
        } catch (e) {
          // 解析失败，忽略
        }
      }
    }

    // 查找名称包含目标ID的属性
    for (const key in item) {
      if (typeof key === 'string' && key.includes('710063228176306177')) {
        const value = item[key];
        if (typeof value === 'string') {
          if (value.startsWith('S')) {
            return value.substring(1);
          }
          return value;
        }
      }
    }

    // 检查item.attributes或其他可能的容器属性
    const containerProps = ['attributes', 'properties', 'fields', 'values', 'metadata'];
    for (const prop of containerProps) {
      if (item[prop] && typeof item[prop] === 'object') {
        // 直接在容器中查找
        if (item[prop].T710063228176306177 && typeof item[prop].T710063228176306177 === 'string') {
          const value = item[prop].T710063228176306177;
          if (value.startsWith('S')) {
            return value.substring(1);
          }
          return value;
        }

        // 在容器中查找匹配的键
        for (const key in item[prop]) {
          if (typeof key === 'string' && key.includes('710063228176306177')) {
            const value = item[prop][key];
            if (typeof value === 'string') {
              if (value.startsWith('S')) {
                return value.substring(1);
              }
              return value;
            }
          }
        }
      }
    }

    // 最后尝试递归搜索（限制深度）
    const searchInObject = (obj: any, depth = 0): string | null => {
      if (!obj || typeof obj !== 'object' || depth > 2) return null;

      // 先查找直接匹配的键
      for (const key in obj) {
        if (typeof key === 'string' && key.includes('710063228176306177')) {
          const value = obj[key];
          if (typeof value === 'string') {
            if (value.startsWith('S')) {
              return value.substring(1);
            }
            return value;
          }
        }
      }

      // 然后递归搜索子对象
      for (const key in obj) {
        if (obj[key] && typeof obj[key] === 'object') {
          const result = searchInObject(obj[key], depth + 1);
          if (result) return result;
        }
      }

      return null;
    };

    return searchInObject(item);
  } catch (error) {
    console.error('解析库位ID时出错:', error);
    return null;
  }
};

// 获取物品名称
const getItemName = (item: Record<string, any>): string => {
  try {
    // 目标属性ID
    const TARGET_ID = '527635710128300032';

    // 直接查找属性
    if (item && item.T527635710128300032) {
      return String(item.T527635710128300032);
    }

    // 查找名称包含目标ID的属性
    for (const key in item) {
      if (typeof key === 'string' && key.includes(TARGET_ID)) {
        return String(item[key]);
      }
    }

    // 检查容器属性和递归搜索
    const searchNameInObject = (obj: any, depth = 0): string | null => {
      if (!obj || typeof obj !== 'object' || depth > 2) return null;

      // 如果是data对象，直接查找
      if (obj.T527635710128300032) {
        return String(obj.T527635710128300032);
      }

      // 查找匹配的键
      for (const key in obj) {
        if (typeof key === 'string' && key.includes(TARGET_ID)) {
          return String(obj[key]);
        }

        // 递归搜索子对象
        if (obj[key] && typeof obj[key] === 'object') {
          const result = searchNameInObject(obj[key], depth + 1);
          if (result) return result;
        }
      }

      return null;
    };

    // 检查data属性
    if (item.data) {
      const nameFromData = searchNameInObject(
        typeof item.data === 'string' ? JSON.parse(item.data) : item.data
      );
      if (nameFromData) return nameFromData;
    }

    // 检查其他常见容器属性
    const containers = ['attributes', 'properties', 'fields', 'values', 'metadata'];
    for (const prop of containers) {
      if (item[prop]) {
        const nameFromContainer = searchNameInObject(item[prop]);
        if (nameFromContainer) return nameFromContainer;
      }
    }

    // 递归搜索整个对象
    const foundName = searchNameInObject(item);
    if (foundName) return foundName;

    return '未知物品';
  } catch (error) {
    return '未知物品';
  }
};

// 获取物品卡片编码
const getItemCardCode = (item: Record<string, any>): string => {
  try {
    // 目标属性ID
    const TARGET_ID = '527635705355182080';

    // 直接查找属性
    if (item && item.T527635705355182080) {
      return String(item.T527635705355182080);
    }

    // 查找名称包含目标ID的属性
    for (const key in item) {
      if (typeof key === 'string' && key.includes(TARGET_ID)) {
        return String(item[key]);
      }
    }

    // 检查容器属性和递归搜索
    const searchCodeInObject = (obj: any, depth = 0): string | null => {
      if (!obj || typeof obj !== 'object' || depth > 2) return null;

      // 如果是data对象，直接查找
      if (obj.T527635705355182080) {
        return String(obj.T527635705355182080);
      }

      // 查找匹配的键
      for (const key in obj) {
        if (typeof key === 'string' && key.includes(TARGET_ID)) {
          return String(obj[key]);
        }

        // 递归搜索子对象
        if (obj[key] && typeof obj[key] === 'object') {
          const result = searchCodeInObject(obj[key], depth + 1);
          if (result) return result;
        }
      }

      return null;
    };

    // 检查data属性
    if (item.data) {
      const codeFromData = searchCodeInObject(
        typeof item.data === 'string' ? JSON.parse(item.data) : item.data
      );
      if (codeFromData) return codeFromData;
    }

    // 检查其他常见容器属性
    const containers = ['attributes', 'properties', 'fields', 'values', 'metadata'];
    for (const prop of containers) {
      if (item[prop]) {
        const codeFromContainer = searchCodeInObject(item[prop]);
        if (codeFromContainer) return codeFromContainer;
      }
    }

    // 递归搜索整个对象
    const foundCode = searchCodeInObject(item);
    if (foundCode) return foundCode;

    return '无编码';
  } catch (error) {
    return '无编码';
  }
};

// 获取物品取得日期
const getItemAcquiredDate = (item: Record<string, any>): string => {
  try {
    // 目标属性ID
    const TARGET_ID = '527635558076391424';

    // 直接查找属性
    if (item && item.T527635558076391424) {
      return String(item.T527635558076391424);
    }

    // 查找名称包含目标ID的属性
    for (const key in item) {
      if (typeof key === 'string' && key.includes(TARGET_ID)) {
        return String(item[key]);
      }
    }

    // 检查容器属性和递归搜索
    const searchDateInObject = (obj: any, depth = 0): string | null => {
      if (!obj || typeof obj !== 'object' || depth > 2) return null;

      // 如果是data对象，直接查找
      if (obj.T527635558076391424) {
        return String(obj.T527635558076391424);
      }

      // 查找匹配的键
      for (const key in obj) {
        if (typeof key === 'string' && key.includes(TARGET_ID)) {
          return String(obj[key]);
        }

        // 递归搜索子对象
        if (obj[key] && typeof obj[key] === 'object') {
          const result = searchDateInObject(obj[key], depth + 1);
          if (result) return result;
        }
      }

      return null;
    };

    // 检查data属性
    if (item.data) {
      const dateFromData = searchDateInObject(
        typeof item.data === 'string' ? JSON.parse(item.data) : item.data
      );
      if (dateFromData) return dateFromData;
    }

    // 检查其他常见容器属性
    const containers = ['attributes', 'properties', 'fields', 'values', 'metadata'];
    for (const prop of containers) {
      if (item[prop]) {
        const dateFromContainer = searchDateInObject(item[prop]);
        if (dateFromContainer) return dateFromContainer;
      }
    }

    // 递归搜索整个对象
    const foundDate = searchDateInObject(item);
    if (foundDate) return foundDate;

    return '未知日期';
  } catch (error) {
    return '未知日期';
  }
};

// 规范化ID格式，确保能够与locationIdMapping匹配
const normalizeLocationId = (id: string): string => {
  // 去除可能的前缀S
  if (id.startsWith('S')) {
    id = id.substring(1);
  }

  // 去除可能的其他前缀（如T等）
  if (/^[A-Za-z]+\d+$/.test(id)) {
    id = id.replace(/^[A-Za-z]+/, '');
  }

  // 处理可能的格式差异，如短横线、下划线等
  id = id.replace(/[-_]/g, '');

  // 如果ID包含非数字字符，可能是另一种格式，尝试提取数字部分
  if (/\D/.test(id)) {
    const match = id.match(/(\d+)/);
    if (match) {
      id = match[1];
    }
  }

  return id;
};

// 在添加物品数据前，确保所有必要的数据都是有效的
const isValidWarehouseItem = (item: WarehouseItem): boolean => {
  return (
    !!item.id &&
    !!item.shelfId &&
    !!item.layerId &&
    !!item.positionId
  );
};

// 创建安全的物品数据
const createSafeWarehouseItem = (
  item: Record<string, any>,
  shelfId: string,
  layerId: string,
  positionId: string,
  index: number,
  locationCode: string,
  realId: string
): WarehouseItem => {
  return {
    id: `item-${shelfId}-${layerId}-${positionId}-${index}`,
    name: getItemName(item) || '未知物品',
    shelfId,
    layerId,
    positionId,
    quantity: 1,
    sku: getItemCardCode(item) || '无编码',
    category: '公物资产',
    status: 'normal',
    expiryDate: getItemAcquiredDate(item) || '未知日期',
    realLocationId: realId,
    locationCode,
    // 保存原始数据，以便在详情页展示
    originalData: item
  };
};

/**
 * 刷新物品数据并更新库位状态
 * 
 * 功能说明：
 * 1. 调用后端API获取所有物品数据
 * 2. 从返回数据中查找"T710063228176306177"属性，提取库位ID（去掉开头的S）
 * 3. 将库位ID与公物仓一的库位进行匹配
 * 4. 更新匹配库位的物品数据，提取以下信息：
 *    - "T527635705355182080"后的数据表示卡片编码号
 *    - "T527635710128300032"后的数据表示物品名称
 *    - "T527635558076391424"后的数据表示取得日期
 * 5. 更新货架状态：有物品的库位显示为蓝色，其他为灰色
 * 6. 根据每个货架上有物品的层数，更新货架颜色：
 *    - 0层：灰色 (empty)
 *    - 1层：蓝色 (first)
 *    - 2层：绿色 (second)
 *    - 3层：黄色 (third)
 *    - 4层：红色 (fourth)
 * 
 * 使用方法：在点击刷新按钮时调用此函数
 */
export const refreshItemsData = async (): Promise<boolean> => {
  try {
    console.log('开始刷新物品数据...');

    // 调用auth.ts中的getAllItems方法获取所有物品数据
    const result = await authService.getAllItems();

    if (!result.success) {
      console.error('获取物品数据失败:', result.msg);
      return false;
    }

    // 重置所有货架的状态为空
    try {
      // 清空所有货架的物品数据 - 先执行清空操作，确保即使后续解析失败也不会导致UI错误
      Object.entries(mockWarehouseData1.shelves).forEach(([area, shelves]) => {
        shelves.forEach(shelf => {
          allWarehouseItemsData.warehouse1[shelf.id] = generateItemsForShelf('warehouse1', shelf.id);
          // 确保所有货架状态为empty
          shelf.status = 'empty';
        });
      });
    } catch (resetError) {
      console.error('重置货架状态时出错:', resetError);
      // 继续执行，尝试完成刷新操作
    }

    // 检查数据结构并提取实际的物品数据数组
    let itemsArray: any[] = [];

    if (result.data) {
      if (Array.isArray(result.data)) {
        itemsArray = result.data;
      } else if (typeof result.data === 'object') {
        // 检查常见的数据结构模式，使用类型断言避免TypeScript错误
        const dataObj = result.data as Record<string, any>;

        if (dataObj.items && Array.isArray(dataObj.items)) {
          itemsArray = dataObj.items;
        } else if (dataObj.data && Array.isArray(dataObj.data)) {
          itemsArray = dataObj.data;
        } else if (dataObj.list && Array.isArray(dataObj.list)) {
          itemsArray = dataObj.list;
        } else if (dataObj.records && Array.isArray(dataObj.records)) {
          itemsArray = dataObj.records;
        } else {
          // 最后尝试将对象本身视为单个物品
          itemsArray = [result.data];
        }
      } else if (typeof result.data === 'string') {
        // 尝试解析JSON字符串
        try {
          const parsedData = JSON.parse(result.data);
          if (Array.isArray(parsedData)) {
            itemsArray = parsedData;
          } else if (parsedData.items && Array.isArray(parsedData.items)) {
            itemsArray = parsedData.items;
          } else if (parsedData.data && Array.isArray(parsedData.data)) {
            itemsArray = parsedData.data;
          } else {
            itemsArray = [parsedData];
          }
        } catch (e) {
          console.error('解析返回的字符串数据失败:', e);
          // 即使解析失败，仍然继续，因为我们已经重置了货架状态
          itemsArray = [];
        }
      }
    }

    if (itemsArray.length === 0) {
      console.warn('未能提取到物品数据或物品数据为空，仅显示空货架');
      // 更新货架状态，确保UI正确显示
      updateShelfStatusesWithItems('warehouse1');
      return true; // 返回true，因为清空操作是成功的
    }

    console.log(`准备处理 ${itemsArray.length} 条物品数据`);

    // 提前检查所有可能的映射ID格式
    const normalizedIdMapping: Record<string, string> = {};
    Object.entries(locationIdMapping).forEach(([locationCode, id]) => {
      normalizedIdMapping[locationCode] = normalizeLocationId(id);
    });

    // 创建库位与物品的映射
    const locationToItems: Record<string, any[]> = {};
    let matchCount = 0;
    let locationIdFoundCount = 0;

    // 遍历所有物品，提取库位ID并与公物仓一的库位进行匹配
    itemsArray.forEach((item) => {
      try {
        const locationId = parseLocationId(item);
        if (locationId) {
          locationIdFoundCount++;

          // 规范化ID格式
          const normalizedId = normalizeLocationId(locationId);

          // 查找这个ID是否对应公物仓一的某个库位
          const matchingEntries = Object.entries(normalizedIdMapping)
            .filter(([, id]) => id === normalizedId);

          const matchingLocationCode = matchingEntries[0]?.[0];

          if (matchingLocationCode) {
            matchCount++;

            // 将物品添加到对应库位的列表中
            if (!locationToItems[matchingLocationCode]) {
              locationToItems[matchingLocationCode] = [];
            }
            locationToItems[matchingLocationCode].push(item);

            // 调试输出 - 输出找到的匹配
            console.log(`匹配成功: ID=${locationId} 对应库位=${matchingLocationCode}`);
          }
        }
      } catch (itemError) {
        console.error('处理物品时出错:', itemError);
        // 继续处理下一个物品
      }
    });

    console.log(`从 ${itemsArray.length} 条物品数据中找到 ${locationIdFoundCount} 个库位ID`);
    console.log(`成功匹配 ${matchCount} 条物品数据到 ${Object.keys(locationToItems).length} 个库位`);

    let processedLocations = 0;

    // 遍历所有匹配到的库位，更新物品数据和货架状态
    Object.entries(locationToItems).forEach(([locationCode, locationItems]) => {
      try {
        const locationInfo = parseLocationCode(locationCode);
        if (!locationInfo) return;

        const { warehouseId, shelfId, layerId, positionId } = locationInfo;

        // 只处理公物仓一的数据
        if (warehouseId !== 'warehouse1') return;

        // 确保数据结构存在
        if (!allWarehouseItemsData[warehouseId][shelfId]) {
          allWarehouseItemsData[warehouseId][shelfId] = {};
        }
        if (!allWarehouseItemsData[warehouseId][shelfId][layerId]) {
          allWarehouseItemsData[warehouseId][shelfId][layerId] = {};
        }

        // 获取正确的库位ID
        const realId = locationIdMapping[locationCode] || '';

        // 创建物品数据 - 使用安全创建函数
        const warehouseItems: WarehouseItem[] = locationItems
          .map((item: Record<string, any>, index) =>
            createSafeWarehouseItem(item, shelfId, layerId, positionId, index, locationCode, realId)
          )
          .filter(isValidWarehouseItem); // 过滤掉无效的物品

        // 更新库位的物品数据
        allWarehouseItemsData[warehouseId][shelfId][layerId][positionId] = warehouseItems;

        processedLocations++;
      } catch (locationError) {
        console.error('处理库位时出错:', locationError);
        // 继续处理下一个库位
      }
    });

    console.log(`成功处理 ${processedLocations} 个库位的物品数据`);

    // 使用try-catch包装更新货架状态的操作
    try {
      // 更新货架的状态
      updateShelfStatusesWithItems('warehouse1');

      // 简化状态检查日志
      let shelvesWithItems = 0;
      Object.entries(mockWarehouseData1.shelves).forEach(([area, shelves]) => {
        shelves.forEach(shelf => {
          if (shelf.status !== 'empty') {
            shelvesWithItems++;
          }
        });
      });
      console.log(`更新完成: ${shelvesWithItems}个货架有物品`);
    } catch (statusError) {
      console.error('更新货架状态时出错:', statusError);
      // 如果更新货架状态失败，确保所有货架至少显示为空
      updateShelfStatuses('warehouse1');
    }

    return true;
  } catch (error) {
    console.error('刷新物品数据失败:', error);
    // 即使发生错误，也确保UI不会崩溃
    try {
      updateShelfStatuses('warehouse1');
    } catch (e) {
      console.error('紧急恢复失败:', e);
    }
    return false;
  }
};

// 更新货架状态，根据有物品的层数
const updateShelfStatusesWithItems = (warehouseId: string) => {
  try {
    const warehouseData = allWarehouses[warehouseId];
    if (!warehouseData) {
      console.error(`找不到仓库: ${warehouseId}`);
      return;
    }

    Object.entries(warehouseData.shelves).forEach(([area, shelves]) => {
      try {
        // 检查shelves是否为数组
        if (!Array.isArray(shelves)) {
          console.error(`仓库 ${warehouseId} 的区域 ${area} 的货架不是数组`);
          return;
        }

        shelves.forEach((shelf: Shelf) => {
          try {
            // 检查shelf是否有效
            if (!shelf || !shelf.id) {
              console.error('发现无效的货架');
              return;
            }

            const shelfId = shelf.id;
            const shelfItemsData = allWarehouseItemsData[warehouseId]?.[shelfId] || {};

            // 检查各层是否有物品
            const layersWithItems = [];

            for (let layerNum = 1; layerNum <= 4; layerNum++) {
              try {
                const layerId = `${shelfId}-L${layerNum}`;
                if (checkLayerHasItems(shelfItemsData, layerId)) {
                  layersWithItems.push(layerNum);
                }
              } catch (layerError) {
                console.error(`检查层 ${shelfId}-L${layerNum} 时出错:`, layerError);
              }
            }

            // 根据有物品的层数设置货架状态
            const layerCount = layersWithItems.length;

            // 确保shelf.status有一个有效值
            if (layerCount === 0) {
              shelf.status = 'empty'; // 没有层有物品 - 灰色
            } else if (layerCount === 1) {
              shelf.status = 'first'; // 1层有物品 - 蓝色
            } else if (layerCount === 2) {
              shelf.status = 'second'; // 2层有物品 - 绿色
            } else if (layerCount === 3) {
              shelf.status = 'third'; // 3层有物品 - 黄色
            } else if (layerCount === 4) {
              shelf.status = 'fourth'; // 4层都有物品 - 红色
            } else {
              // 这种情况不应该发生，但为了安全，设置一个默认值
              shelf.status = 'empty';
            }
          } catch (shelfError) {
            console.error(`更新货架 ${shelf?.id || '未知'} 状态时出错:`, shelfError);
            // 确保货架状态有一个默认值
            if (shelf) shelf.status = 'empty';
          }
        });
      } catch (areaError) {
        console.error(`处理区域 ${area} 时出错:`, areaError);
      }
    });
  } catch (error) {
    console.error('更新货架状态时出错:', error);
  }
};

// 辅助函数：检查某一层是否有物品
const checkLayerHasItems = (
  shelfItemsData: Record<string, Record<string, WarehouseItem[]>>,
  layerId: string
): boolean => {
  try {
    // 检查输入参数是否有效
    if (!shelfItemsData || typeof shelfItemsData !== 'object') {
      return false;
    }

    // 检查layerId是否存在于shelfItemsData中
    if (!shelfItemsData[layerId] || typeof shelfItemsData[layerId] !== 'object') {
      return false;
    }

    // 获取该层的所有库位
    const positions = shelfItemsData[layerId];

    // 如果没有库位，则直接返回false
    if (Object.keys(positions).length === 0) {
      return false;
    }

    // 检查该层的所有库位是否有物品
    return Object.values(positions).some(items => {
      // 检查items是否为数组且长度大于0
      return Array.isArray(items) && items.length > 0 && items.some(isValidWarehouseItem);
    });
  } catch (error) {
    console.error(`检查层 ${layerId} 是否有物品时出错:`, error);
    return false;
  }
};